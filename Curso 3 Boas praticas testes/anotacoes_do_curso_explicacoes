anotacoes do curso:

diferenças entre Mock e Spy:

Ao desenvolver testes automatizados para aplicações Java, é comum usar frameworks e bibliotecas que facilitam a criação de testes mais eficientes e confiáveis. O Mockito é uma dessas bibliotecas amplamente utilizadas para testes em Java. Ele fornece recursos poderosos para criar objetos simulados (mocks) e objetos espiões (spies) que ajudam a isolar o código sob teste e verificar seu comportamento.

Embora os conceitos de mocks e spies sejam semelhantes no Mockito, eles diferem em alguns aspectos importantes.

Mock
Um mock é um objeto simulado que substitui um objeto real durante a execução dos testes. Ele é criado usando o Mockito e permite definir comportamentos esperados e verificar interações com o objeto simulado. Os mocks são úteis quando você deseja isolar o código sob teste de suas dependências, fornecendo respostas predefinidas para os métodos chamados durante os testes.

Ao usar um mock, você especifica quais métodos do objeto simulado devem ser chamados e qual será a resposta. Por exemplo, você pode configurar um mock para retornar um valor específico quando um determinado método for chamado. Isso permite que você simule cenários diferentes e verifique como o código reage a eles. Além disso, os mocks fornecem métodos para verificar se determinados métodos foram chamados e quantas vezes foram chamados durante a execução do teste.

Spy
Um spy, por outro lado, é um objeto real que é usado durante os testes, mas também permite a observação de seu comportamento. Ao contrário dos mocks, os spies mantêm o comportamento original do objeto sendo espionado, a menos que seja especificamente substituído.

Ao criar um spy usando o Mockito, você está usando uma instância real do objeto em questão, mas também pode definir comportamentos específicos para seus métodos. Isso significa que o código original do objeto será executado, a menos que você especifique uma substituição para um determinado método.

Os spies são úteis quando você deseja testar partes específicas de um objeto real sem perder o comportamento original do objeto. Você pode substituir apenas os métodos relevantes para seus testes, enquanto o restante do objeto continua funcionando normalmente. Os spies também permitem verificar interações reais com o objeto sob teste, como quantas vezes um método foi chamado.

Ao utilizar o Mockito para testes automatizados em Java, você pode escolher entre mocks e spies, dependendo das necessidades específicas do seu teste. Ambas as abordagens são úteis e têm seus usos adequados. A escolha entre mock e spy depende do cenário de teste e dos requisitos específicos.

padrões de organização de testes:

Ao escrever testes automatizados é importante pensar em como organizar o código de cada teste, de forma que fique bem fácil de entender cada cenário sendo testado. Para facilitar esse processo, existem alguns padrões de organização do código de cada cenário de teste que podem ser utilizados para ajudar nesse objetivo.

Dois padrões são os mais comuns na organização de testes automatizados: "Arrange, Act, Assert" (conhecido como AAA ou Triple A) e "Given, When, Then" (conhecido como GWT). Ambos os padrões têm o objetivo de tornar os testes mais legíveis e fáceis de entender, promovendo uma abordagem estruturada na criação de cenários de teste.

Arrange, Act, Assert (AAA)
O padrão AAA é amplamente utilizado e consiste em três etapas distintas:

a) Arrange (Preparar): Nesta etapa, são realizadas todas as configurações iniciais necessárias para que o cenário de teste possa ser executado. Isso pode incluir a criação de objetos, definição de variáveis, configuração de ambiente e qualquer outra preparação necessária para que o teste seja executado em um estado específico.

b) Act (Agir): Nesta fase, a ação que se deseja testar é executada. Pode ser a chamada de um método, uma interação com a interface do usuário ou qualquer outra operação que seja o foco do teste.

c) Assert (Verificar): Na última etapa, os resultados são verificados em relação ao comportamento esperado. É onde se avalia se o resultado obtido após a ação está de acordo com o que se esperava do teste. Caso haja alguma discrepância entre o resultado real e o esperado, o teste falhará.

Given, When, Then (GWT)
O padrão GWT também é conhecido como padrão BDD (Behavior-Driven Development). Ele foi projetado para criar testes com uma linguagem mais próxima da forma como os cenários são discutidos entre as pessoas que fazem parte do projeto, incluindo pessoas técnicas, como desenvolvedores e testadores, além de clientes e usuários da aplicação. O padrão GWT tem as seguintes etapas:

a) Given (Dado): Nesta etapa, é descrito o cenário inicial ou o contexto do teste. São definidas as condições iniciais necessárias para a execução do cenário de teste.

b) When (Quando): Aqui, a ação específica que está sendo testada é executada. É a etapa em que a ação do usuário ou do sistema acontece.

c) Then (Então): Nesta etapa, os resultados esperados são verificados. São definidos os critérios de sucesso para o cenário de teste, e o teste é aprovado ou reprovado com base nesses resultados.

Ambos os padrões tornam os testes mais fáceis de ler e entender, mesmo para pessoas não familiarizadas com o código ou com a lógica de negócios do sistema. Além disso, a estruturação dos testes em etapas claras e definidas torna mais fácil para as pessoas desenvolvedoras localizarem e corrigirem problemas em caso de falha.


